//// COMANDI ////
//W,A,S,D: movimento
//P: pausa
//R: restart
//T: modifica seed, INVIO per confermare (per random) (quando in pausa o game over)

//La velocità ideale della Virtual Machine per giocarlo è la seconda più veloce (più veloce è
//troppo veloce, più lento è lento quando deve creare un nuovo frutto), ma si può cambiare il
//valore del counter in SKIP_UPDATE per modificare la velocità di aggiornamento dei frame.



call Sys.init 0


//STATIC: 0=running(1=in funzione, 0=in pausa), 1=seed (per random), 2=newScore, 3=game over (1=true)

//setup e chiamata di Update
function Main.main 0
	push constant 3331
	pop static 4

	push constant 1
	pop static 0		//running(1=in funzione, 0=in pausa)
	push constant 3
	pop static 1		//Random seed
	push constant 1
	pop static 2		//newScore (1 quando lo score è aggiornato)
	push constant 0
	pop static 3		//game over = 0 (false)

	call Level.init 0
	pop temp 0
	call Snake.init 0
	pop temp 0
	call Hud.init 0
	pop temp 0
	call Random.init 0
	pop temp 0

	push static 1
	call Random.setSeed 1
	pop temp 0

	call Main.Update 0

return



//funzione con un loop che si ripete finché il gioco funziona
//LOCAL: 0=counter per input
function Main.Update 1

label UPDATE
	//if(pause) skip
	push static 0
	push constant 0
	eq
	if-goto SKIP_UPDATE

	call Level.newFruit 0
	pop temp 0
	call Snake.move 0
	pop temp 0

	//HUD
	//if(newScore==0) skip
	push static 2
	push constant 0
	eq
	if-goto SKIP_UPDATE
	//else drawScore
	call Hud.drawScore 0
	pop static 2			//newScore = 0

label SKIP_UPDATE
push constant 500
pop local 0					//local[0]=counter
label INPUT_LOOP
	//if(counter==0) update
	push local 0
	push constant 0
	eq
	if-goto UPDATE
	//else get_input
	call Main.getInput 0
	pop temp 0
	push local 0
	push constant 1
	sub
	pop local 0				//counter--
	goto INPUT_LOOP


	push constant 0
return





function Main.GameOver 0
	push constant 0
	pop static 0
	push constant 1
	pop static 3
	call Hud.writeGameOver 0
return


//spazio(32):salta, R(82):reset, P(80):pausa/riprendi
function Main.getInput 1
//controllo input
	call Keyboard.keyPressed 0
	pop local 0				//local[0] = keyPressed
	push local 0
	push constant 87
	eq
	if-goto W
	push local 0
	push constant 65
	eq
	if-goto A
	push local 0
	push constant 83
	eq
	if-goto S
	push local 0
	push constant 68
	eq
	if-goto D
	push local 0
	push constant 80
	eq
	if-goto P
	push local 0
	push constant 82
	eq
	if-goto R
	push local 0
	push constant 84
	eq
	if-goto T
	goto END
label W
	push constant 1
	neg
	call Snake.setYdirection 1
	pop temp 0
	goto END
label A
	push constant 1
	neg
	call Snake.setXdirection 1
	pop temp 0
	goto END
label S
	push constant 1
	call Snake.setYdirection 1
	pop temp 0
	goto END
label D
	push constant 1
	call Snake.setXdirection 1
	pop temp 0
	goto END
label P
	call Hud.writePause 0
	pop temp 0
	//wait
	push constant 500
	call Sys.wait 1
	pop temp 0
	//if(game over) end
	push static 3
	push constant 1
	eq
	if-goto END
	//else running=!running
	push constant 1
	push static 0
	sub
	pop static 0			//running=1-running=!running
	goto END
label R
	call Main.restart 0
	pop temp 0
	push constant 0
	pop static 3			//game over = false
	push constant 1
	pop static 0			//pause = false
	goto END
label T
	push static 0
	if-goto END				//if(!paused) end
	call Hud.Seed 0
	pop temp 0
	goto END
label END
	push constant 0
return


function Main.restart 0
	push static 0
	push constant 1
	eq
	if-goto RESETS
//if(paused) cancella PAUSE
	call Hud.writePause 0
	pop temp 0
	push constant 1
	pop static 0			//running=true
label RESETS
	call Level.clearScene 0	//cancella schermo
	pop temp 0
	call Level.reset 0		//resetta variabili e array di Level
	pop temp 0
	call Snake.reset 0
	pop temp 0
	call Hud.resetScore 0	//score=0
	pop temp 0

	push constant 800
	call Sys.wait 1			//aspetta circa 1,5 secondi
return



//// SET COLOR ////

function Main.setColorWhite 0
	push constant 0
	call Screen.setColor 1
return

function Main.setColorBlack 0
	push constant 1
	neg
	call Screen.setColor 1
return



//// SET/GET ////

function Main.getState 0
	push static 0
return

function Main.setNewScore 0
	push constant 1
	pop static 2
	push constant 0
return